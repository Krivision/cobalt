// Copyright 2016 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

plugins {
    alias(libs.plugins.android.application)
}

android {
    namespace 'dev.cobalt.coat'
    compileSdk 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "dev.cobalt.coat"
        minSdk 30
        targetSdk 34
        versionCode 1
        versionName "0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags '-std=c++17'
            }
        }

        // Read properties from local.properties
        Properties properties = new Properties()
        File localPropertiesFile = rootProject.file('local.properties')
        String developmentHost = 'localhost';
        if (localPropertiesFile.exists()) {
            properties.load(new FileInputStream(localPropertiesFile))
            // Get the development host property, defaulting if not found
            developmentHost = properties.getProperty('developmentHost', 'localhost')
        }
        // Add it as a build config field
        buildConfigField 'String', 'DEFAULT_DEVELOPMENT_HOST', "\"$developmentHost\""

    }

    buildTypes {
        devel {
            debuggable true
            jniDebuggable true
            enableUnitTestCoverage true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            manifest.srcFile "src/app/AndroidManifest.xml"
            java {
                srcDirs 'src/main/java', 'src/app/java'
            }
            assets {
                srcDirs 'src/main/assets', 'src/app/assets'
            }
            res {
                srcDirs 'src/main/res', 'src/app/res'
            }
        }
    }
    buildFeatures {
        prefab true
        buildConfig true
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def newApkName = "chrobalt_${variant.name}-${variant.versionName}.apk"
            outputFileName = newApkName
        }
    }
}

dependencies {

    implementation libs.appcompat
    implementation libs.material
    implementation libs.games.activity
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core

    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.core:core:1.8.0'
    implementation 'androidx.leanback:leanback:1.0.0'
    implementation 'com.google.android.gms:play-services-ads-identifier:17.0.0'

    testImplementation 'junit:junit:4.12'
    testImplementation "com.google.truth:truth:1.1.3"
}

tasks.withType(Test) {
    testLogging {
        // Enable detailed logging
        exceptionFormat 'full'
    }
}
